ORG 0

	acall	CONFIGURE_LCD   ;ALWAYS ADD THIS LINE TO YOUR CODES AT THE BEGINNING IN ORDER TO INITIALIZE THE LCD SCREEN

START:	clr A
	mov DPTR,#MYSTRING_1
	MOV R0,#0H
	MOV R1,#0H
	MOV R2,#0H; hex stored
	MOV R3,#0H; 2nd digit
	MOV R4,#0H; 3rd digit
	MOV R5,#0H; base
	MOV R6,#0H
	MOV R7,#0H; 8 counter

DATA_LOOP:  			;DATA LOOP THAT PRINTS 'NUMBER='
	movc a,@a+dptr
	jz DATA_FINISHED
	acall SEND_DATA
	clr a
	inc dptr
	sjmp DATA_LOOP

DATA_FINISHED: 
	mov A, #006h  ; Force cursor to the right
	acall send_command

USER_INPUT_1: ;take the first digit input
	acall KEYBOARD
	acall SEND_DATA
	mov R2, A;save the first digit on R2	

USER_INPUT_2: ;take the second digit input
	acall KEYBOARD
	MOV R3, A ; save the second digit on R3
	CJNE A, #'A', NOT_A
	mov A, R2
	acall ASCII_TO_HEX_1;convert the digit to hex
	MOV R2,A 
	sjmp NEXT_WRITE 

NOT_A: ;write the digit to lcd if the input's not a, which means it's a two or three digit number
	acall SEND_DATA
	acall KEYBOARD
	MOV R4, A; save the third digit on R4
	CJNE A, #'A', NOT_A_AGAIN
	MOV A, R3
	acall ASCII_TO_HEX_1 ;convert the second digit to hex
	MOV R3,A
	MOV A, R2
	acall ASCII_TO_HEX_10 ;convert the first digit to hex
	add a, R3 ;add the second digit to the first digit
	mov R2,a ;save the input on R2
	sjmp NEXT_WRITE

NOT_A_AGAIN:
	MOV A, R4
	acall SEND_DATA
	MOV A, R2
	acall ASCII_TO_HEX_100
	MOV R2,A
	MOV A, R3
	ACALL ASCII_TO_HEX_10
	MOV R3,A
	MOV A, R4
	ACALL ASCII_TO_HEX_1
	ADD A, R2
	ADD A, R3
	MOV R2, A 

NEXT_WRITE: ;pass to the right
	mov A, #6h
	acall send_command
	mov A, #6h
	acall send_command
	clr A
	mov DPTR, #MYSTRING_2

DATA_LOOP_2: ;write 'BASE='
	movc A, @A+DPTR
	jz DATA_FINISHED_2
	acall SEND_DATA
	clr a
	inc dptr
	sjmp DATA_LOOP_2

DATA_FINISHED_2:
	mov A, #006h ;force cursor to the right
	acall SEND_COMMAND

USER_INPUT_4: ;take the base input
	acall KEYBOARD
	acall SEND_DATA
	mov R5, A;save the base on R5
	mov A, #0C0H; force the cursor to the next line
	acall SEND_COMMAND
	clr A
	mov DPTR, #MYSTRING_3

DATA_LOOP_3: ;write 'RESULT='
	movc A, @A+DPTR
	jz DATA_FINISHED_3
	acall SEND_DATA
	clr a
	inc dptr
	sjmp DATA_LOOP_3

DATA_FINISHED_3:
	mov A, #006h ;force cursor to the right
	acall SEND_COMMAND

BASE_CONVERSION:
	MOV A, R5
	CJNE A, #'2', CHECK_4
	MOV A, R2
	MOV R4,#8
DIV_AGAIN_2:
	MOV B,#2
	DIV AB
	MOV R3, B
	PUSH 3
	DJNZ R4, DIV_AGAIN_2

	MOV R4, #8
SHOW_AGAIN_2:
	POP 3
	MOV A, R3
	ACALL HEX_TO_ASCII
	DJNZ R4, SHOW_AGAIN_2
	SJMP END_LOOP
CHECK_4:
	MOV A, R5
	CJNE A, #'4', IT_S_8
	MOV A, R2
	MOV R4, #4
DIV_AGAIN_4:
	MOV B, #4 
	DIV AB
	MOV R3, B
	PUSH 3
	DJNZ R4, DIV_AGAIN_4

	MOV R4, #4
SHOW_AGAIN_4:
	POP 3
	MOV A, R3
	ACALL HEX_TO_ASCII
	DJNZ R4, SHOW_AGAIN_4
	SJMP END_LOOP
IT_S_8:
	MOV A, R2
	MOV R4, #3
DIV_AGAIN_8:
	MOV B, #8
	DIV AB
	MOV R3, B
	PUSH 3
	DJNZ R4, DIV_AGAIN_8

	MOV R4, #3
SHOW_AGAIN_8:
	POP 3
	MOV A, R3
	ACALL HEX_TO_ASCII
	DJNZ R4, SHOW_AGAIN_8
	

END_LOOP:
    	clr A
	acall KEYBOARD
	CJNE A, #'B', END_LOOP ; Stay in an infinite loop
	mov a, #01h ;clear lcd
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ljmp START



ASCII_TO_HEX_1:	;SUBRROUTINE TO CONVERT ASCII INTO HEX
	CLR C ;clear cy
	SUBB A, #30H ;a=a-subb-cy
	ret

ASCII_TO_HEX_10: ;subroutine to convert the first digit of the two digit numbers to hex
	CLR C 
	SUBB A, #30H 
	MOV R6, A 
	CLR A 
	AGAIN_10:  ADD A, #10
		DJNZ R6, AGAIN_10 
	ret
	
ASCII_TO_HEX_100:;subroutine to convert the first digit of the three digit numbers to hex
	CLR C
	SUBB A, #30H
	MOV R7, A
	CLR A
	AGAIN_100:  ADD A, #100
		DJNZ R7, AGAIN_100
	ret 


HEX_TO_ASCII:
	CJNE A, #0AH, COMPARATOR_1
COMPARATOR_1:
	JNC BIGGER_THAN_9D
	JC BETWEEN_0_9D
BIGGER_THAN_9D:
	CJNE A, #64H,COMPARATOR_2
COMPARATOR_2:
	JNC BETWEEN_99D_FFH
	JC BETWEEN_10_99D
BETWEEN_99D_FFH:
	MOV B, #100
	DIV AB
	ADD A, #30H
	ACALL SEND_DATA
	MOV A, B
	MOV B, #10
	DIV AB
	ADD A, #30H
	ACALL SEND_DATA
	MOV A, B
	ADD A, #30H
	ACALL SEND_DATA
	sjmp EXIT

BETWEEN_0_9D:
	ADD A, #30H
	ACALL SEND_DATA
	sjmp EXIT
BETWEEN_10_99D:
	MOV B, #10
	DIV AB
	ADD A, #30H
	ACALL SEND_DATA
	MOV A, B
	ADD A, #30H
	ACALL SEND_DATA	

EXIT:
	RET
	

CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret



SEND_COMMAND: ;THIS SUBROUTINE SENDS THE LCD COMMANDS TO THE LCD
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA: ;THIS SUBROUTINE SENDS DATA TO BE DISPLAYED IN AN ASCII FORMAT TO THE LCD
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


DELAY:
	push 0
	push 1
	mov r0,#50
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret


KEYBOARD: ; takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'

MYSTRING_1: DB 'NUMBER=',0
MYSTRING_2: DB 'BASE=',0
MYSTRING_3: DB 'RESULT=',0

END





