Lab 2 Part 2:
ORG 0000H
LJMP MAIN

ORG 001BH
CLR TR1
MOV TL1, #0F0H
MOV TH1, #0D8H
INC 11H
SETB TR1
RETI

ORG 0030H
MAIN:

acall	CONFIGURE_LCD   ;ALWAYS ADD THIS LINE TO YOUR CODES AT THE BEGINNING IN ORDER TO INITIALIZE THE LCD SCREEN
START:	
	clr A
	mov DPTR,#MYSTRING
	mov R0, #0H
	mov R1, #0H
	mov R2, #0H
	mov R3, #0H
	mov R4, #0H
	mov R5, #0H
	mov R6, #0H
	mov R7, #0H
	MOV 10H, #0H 
	MOV 11H, #0H



DATA_LOOP_1:  			;DATA LOOP THAT PRINTS 'T='
	movc a,@a+dptr
	jz DATA_FINISHED_1
	acall SEND_DATA
	clr a
	inc dptr
	sjmp DATA_LOOP_1

DATA_FINISHED_1: 
	mov a, #006h  ; Force cursor to the right
	acall send_command
	
USER_INPUT_1: ;take the first digit input
	acall KEYBOARD
	acall SEND_DATA
	mov R0, A;save the first digit on R0	

USER_INPUT_2: ;take the second digit input
	acall KEYBOARD
	MOV R1, A ; save the second digit on R1
	acall SEND_DATA
	
	acall KEYBOARD
	MOV R2, A; save the third digit on R4
	CJNE A, #'A', NOT_A
	MOV A, R1
	acall ASCII_TO_HEX_1 ;convert the second digit to hex
	MOV R1,A
	MOV A, R0
	acall ASCII_TO_HEX_10 ;convert the first digit to hex
	add a, R1 ;add the second digit to the first digit
	mov R0,a ;save the input on R0
	
	mov a, #006h  ; Force cursor to the right
	acall send_command
	CLR a 
	mov DPTR,#MYSTRING_2		;DATA LOOP THAT PRINTS 'ms'
	sjmp DATA_LOOP_3

NOT_A:
	MOV A, R2
	acall SEND_DATA
	MOV A, R0
	acall ASCII_TO_HEX_100
	MOV R0,A
	MOV A, R1
	ACALL ASCII_TO_HEX_10
	MOV R1,A
	MOV A, R2
	ACALL ASCII_TO_HEX_1
	ADD A, R0
	ADD A, R1
	MOV R0, A
	mov a, #006h  ; Force cursor to the right
	acall send_command
	CLR a 
	mov DPTR,#MYSTRING_2		;DATA LOOP THAT PRINTS 'ms' 

DATA_LOOP_3: 

	movc a,@a+dptr
	jz NEXT_LINE
	acall SEND_DATA
	clr a
	inc dptr
	sjmp DATA_LOOP_3


	

NEXT_LINE: ;pass to the next line
	mov A, #0C0h
	acall send_command
	clr A
	mov DPTR, #MYSTRING_1


DATA_LOOP_2: ;write Duty Cycle=
	movc A, @A+DPTR
	jz DATA_FINISHED_2
	acall SEND_DATA
	clr a
	inc dptr
	sjmp DATA_LOOP_2

DATA_FINISHED_2:
	mov A, #006h ;force cursor to the right
	acall SEND_COMMAND

USER_INPUT_3: ;take the second digit input
	acall KEYBOARD
	acall send_data
	MOV R1, A ; save the first digit on R1

	acall keyboard
	acall SEND_DATA
	acall ASCII_TO_HEX_1 ;convert the second digit to hex
	MOV R2,A
	MOV A, R1
	acall ASCII_TO_HEX_10 ;convert the first digit to hex
	add a, R2 ;add the second digit to the first digit
	mov R1,a ;save the input on R4



MOV A, R0
MOV B, #10
DIV AB
MOV R2, A

MOV A, R1
MOV B, #10
DIV AB
MOV R3, A 

MOV A, R2
MOV B, R3
MUL AB
MOV R2, A 

CLR C 
MOV A, R0
SUBB A, R2
MOV R3, A 

;PART 2
MOV A, R1
MOV B, #2
DIV AB
MOV R1, A 



MOV A, R0
MOV B, #10
DIV AB
MOV B, R1
MUL AB
MOV R4, A
MOV A,B    
JNZ NOT_0 
MOV B, #10
MOV A, R4
DIV AB
MOV R4, A  
SJMP CONT

NOT_0:
MOV A, R4
ADD A, #6
MOV B, #10
DIV AB
ADD A, #25
MOV R4, A 

CONT:
CLR C 
MOV A, R0
SUBB A, R4
MOV R6, A 



CLR P3.0
MOV TMOD, #11H

T1_START:
MOV 5H, R2
MOV TL1, #0F0H
MOV TH1, #0D8H
MOV IE, #88H
SETB TR1 ;10 MS 
CLR_1:MOV 11H, #0
MOV 10H, #200
TWO_SECOND: 
CPL P3.0 ;1 OLDU

AGAIN: 	
	MOV TL0, #18H
	MOV TH0, #0FCH
	SETB TR0
	
BACK: 	JNB TF0, BACK ;1MS
	CLR TR0
	CLR TF0
	DJNZ R5, AGAIN 
	MOV 5H, R3
	CPL P3.0; 0 OLDU

AGAIN_1: 	
	MOV TL0, #18H
	MOV TH0, #0FCH
	SETB TR0
BACK_1:
 	JNB TF0, BACK_1
	CLR TR0
	CLR TF0
	DJNZ R5, AGAIN_1
	MOV 5H, R2 

HERE: 	MOV A, 11H
	CJNE A, 10H, COMPARATOR
COMPARATOR:JNC T1_START_1
JC TWO_SECOND

T1_START_1: 
CLR TR1
CLR TF1
MOV 5H, R4
CLR_2:MOV 11H, #0
MOV 10H, #100
CLR TR1
CLR TF1
MOV TL1, #0F0H
MOV TH1, #0D8H
MOV IE, #88H
SETB TR1 ;10 MS 
ONE_SECOND: 
	CPL P3.0 ;1 OLDU


AGAIN_2: 
	MOV TL0, #18H
	MOV TH0, #0FCH
	SETB TR0
BACK_2:
 	JNB TF0, BACK_2
	CLR TR0
	CLR TF0
	DJNZ R5, AGAIN_2 
	MOV 5H, R6
	CPL P3.0; 0 OLDU

AGAIN_3: 	
	MOV TL0, #18H
	MOV TH0, #0FCH
	SETB TR0
BACK_3:
 	JNB TF0, BACK_3
	CLR TR0
	CLR TF0
	DJNZ R5, AGAIN_3
	MOV 5H, R4
	

HERE_1: MOV A, 11H

CJNE A, 10H, COMPARATOR_1

COMPARATOR_1:JNC JUMP
JC ONE_SECOND

JUMP:LJMP T1_START
	




ASCII_TO_HEX_1:	;SUBRROUTINE TO CONVERT ASCII INTO HEX
	CLR C ;clear cy
	SUBB A, #30H ;a=a-subb-cy
	ret

ASCII_TO_HEX_10: ;subroutine to convert the first digit of the two digit numbers to hex
	CLR C 
	SUBB A, #30H 
	MOV B, #10
	MUL AB
	

	ret
	
ASCII_TO_HEX_100:;subroutine to convert the first digit of the three digit numbers to hex
	CLR C
	SUBB A, #30H
	mov b, #100
	MUL AB
	ret 

CONFIGURE_LCD:	;THIS SUBROUTINE SENDS THE INITIALIZATION COMMANDS TO THE LCD
	mov a,#38H	;TWO LINES, 5X7 MATRIX
	acall SEND_COMMAND
	mov a,#0FH	;DISPLAY ON, CURSOR BLINKING
	acall SEND_COMMAND
	mov a,#06H	;INCREMENT CURSOR (SHIFT CURSOR TO RIGHT)
	acall SEND_COMMAND
	mov a,#01H	;CLEAR DISPLAY SCREEN
	acall SEND_COMMAND
	mov a,#80H	;FORCE CURSOR TO BEGINNING OF THE FIRST LINE
	acall SEND_COMMAND
	ret



SEND_COMMAND: ;THIS SUBROUTINE SENDS THE LCD COMMANDS TO THE LCD
	mov p1,a		;THE COMMAND IS STORED IN A, SEND IT TO LCD
	clr p3.5		;RS=0 BEFORE SENDING COMMAND
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


SEND_DATA: ;THIS SUBROUTINE SENDS DATA TO BE DISPLAYED IN AN ASCII FORMAT TO THE LCD
	mov p1,a		;SEND THE DATA STORED IN A TO LCD
	setb p3.5	;RS=1 BEFORE SENDING DATA
	clr p3.6		;R/W=0 TO WRITE
	setb p3.7	;SEND A HIGH TO LOW SIGNAL TO ENABLE PIN
	acall DELAY
	clr p3.7
	ret


DELAY:
	push 0
	push 1
	mov r0,#50
DELAY_OUTER_LOOP:
	mov r1,#255
	djnz r1,$
	djnz r0,DELAY_OUTER_LOOP
	pop 1
	pop 0
	ret


KEYBOARD: ; takes the key pressed from the keyboard and puts it to A
	mov	P0, #0ffh	;makes P0 input
K1:
	mov	P2, #0	;ground all rows
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, K1
K2:
	acall	DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER
	sjmp	K2
KB_OVER:
	acall DELAY
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, KB_OVER1
	sjmp	K2
KB_OVER1:
	mov	P2, #11111110B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_0
	mov	P2, #11111101B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_1
	mov	P2, #11111011B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_2
	mov	P2, #11110111B
	mov	A, P0
	anl	A, #00001111B
	cjne	A, #00001111B, ROW_3
	ljmp	K2
	
ROW_0:
	mov	DPTR, #KCODE0
	sjmp	KB_FIND
ROW_1:
	mov	DPTR, #KCODE1
	sjmp	KB_FIND
ROW_2:
	mov	DPTR, #KCODE2
	sjmp	KB_FIND
ROW_3:
	mov	DPTR, #KCODE3
KB_FIND:
	rrc	A
	jnc	KB_MATCH
	inc	DPTR
	sjmp	KB_FIND
KB_MATCH:
	clr	A
	movc	A, @A+DPTR; get ASCII code from the table 
	ret

;ASCII look-up table 
KCODE0:	DB	'1', '2', '3', 'A'
KCODE1:	DB	'4', '5', '6', 'B'
KCODE2:	DB	'7', '8', '9', 'C'
KCODE3:	DB	'*', '0', '#', 'D'

MYSTRING: DB 'T=',0
MYSTRING_1: DB 'Duty Cycle=',0
MYSTRING_2: DB ' ms', 0

END






